{
  parserClass="coop.rchain.lang.RhoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rho"
  psiImplClassSuffix="Impl"
  psiPackage="coop.rchain.lang.psi"
  psiImplPackage="coop.rchain.lang.psi.impl"

  elementTypeHolderClass="coop.rchain.lang.psi.RhoTypes"
  elementTypeClass="coop.rchain.lang.psi.RhoElementType"
  tokenTypeClass="coop.rchain.lang.psi.RhoTokenType"

  tokens = [
    CONTRACT = "contract"
    MATCH = "match"
    FOR = "for"
    NEW = "new"
    SELECT = "select"
    IF = "if"
    ELSE = "else"
    IN = "in"
    FALSE = "false"
    TRUE = "true"
    NIL = "Nil"

    FAT_ARROW = "=>"
    THIN_ARROW = "->"
    DOT = "."

    BITWISE_AND = "&"
    BITWISE_OR = "|"
    BITWISE_XOR = "^"

    TRIPLE_DOT = "..."
    DOUBLE_DOT = ".."
    DOUBLE_COLON = "::"
    COLON = ":"

    PLUS = "+"
    MINUS = "-"
    MULTIPLY = "*"
    DIVIDE = "/"
    REMAINDER = "%"

    ASSIGN_LEFT_SHIFT = "<<="
    ASSIGN_RIGHT_SHIFT = ">>="
    EQUAL = "=="
    ASSIGN = "="
    NOT_EQUAL = "!="
    LESS_THAN_OR_EQUAL = "<="
    LESS_THAN = "<"
    GREATER_THAN_OR_EQUAL = ">="
    GREATER_THAN = ">"

    NOT = "!"
    BOX = "~"
    AT = "@"
    SINGLE_QUOTE = "'"
    DOLLAR = "$"

    HASH = "#"
    OPEN_SQUARE_BRACKET = "["
    CLOSE_SQUARE_BRACKET = "]"
    OPEN_PAREN = "("
    CLOSE_PAREN = ")"
    OPEN_BRACE = "{"
    CLOSE_BRACE = "}"
    COMMA = ","
    SEMICOLON = ";"
    UNDERSCORE = "_"


    space='regexp:\s+'
    line_comment='regexp://.*'
    block_comment="regexp:/\*(.|\n)*\*/"

    Integer='regexp:\d+(\.\d*)?'
    ID_NAME="regexp:([a-zA-Z'][a-zA-Z_0-9']*)|([_a-zA-Z0-9']+)"
    StringLit="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    // todo-abner url regexp
    URI = "regexp:`([^`\\]|\\[`\\])*`"
  ]

//  psiImplUtilClass="coop.rchain.psi.impl.RhoPsiImplUtil"
//  consumeTokenMethod("Proc.*|Proc")="consumeTokenFast"

//  extends(".*Quantity")=Quantity
}

RootProc ::= Proc
Proc ::= Proc_ (COMMA Proc_)*
private Proc_ ::= Proc1 Proc__
private Proc__ ::= ["|" Proc1 Proc__]

private Proc16 ::= Ground | Collection | ProcVar | "Nil" | SimpleType | ProcBlock
private Proc15 ::= "~" Proc15 | Proc16
private Proc14 ::= Proc15 Proc14_
private Proc14_ ::= ["/\\" Proc15 Proc14_]
private Proc13 ::= Proc14 Proc13_
private Proc13_ ::= ["\\/" Proc14 Proc13_ | VarRefKind Var Proc13_]
private Proc12 ::= "*" RhoName | Proc13
private Proc11 ::= Proc12 Proc11_ | OPEN_PAREN Proc4 CLOSE_PAREN Proc11_
private private Proc11_ ::= [DOT Var ProcParenOption Proc11_]

private Proc10 ::= NOT Proc10 | "-" Proc10 | Proc11

private Proc9 ::= Proc10 Proc9_
private Proc9_ ::= [("*" | "/" | "%%") Proc10 Proc9_]

private Proc8 ::= Proc9 Proc8_
private Proc8_ ::= [("+" | "-" | "++" | "--") Proc9 Proc8_]

private Proc7 ::= Proc8 Proc7_
private Proc7_ ::= [("<" | "<=" | ">" | ">=" | "matches") Proc8 Proc7_]

private Proc6 ::= Proc7 Proc6_
private Proc6_ ::= [("==" | "!=") Proc7 Proc6_]

private Proc5 ::= Proc6 Proc5_
private Proc5_ ::= ["and" Proc6 Proc5_]

private Proc4 ::= Proc5 Proc4_
private Proc4_ ::= ["or" Proc5 Proc4_]
Proc3 ::= RhoName Send ProcParenOption | Proc4
private Proc2 ::= PContr | PInput | PChoice | PMatch | PBundle | Proc3
private Proc1 ::= PIfElse | PIf | PNew | Proc2

PContr ::= CONTRACT RhoName OPEN_PAREN RhoName? NameRemainder CLOSE_PAREN ASSIGN ProcBlock
PInput ::= FOR OPEN_PAREN Receipt CLOSE_PAREN ProcBlock
PChoice ::= SELECT OPEN_BRACE Branch? CLOSE_BRACE
PBundle ::= Bundle ProcBlock
PMatch ::=  MATCH Proc4 CaseBlock

CaseBlock ::= OPEN_BRACE [Case] CLOSE_BRACE

PIfElse ::= IF OPEN_PAREN Proc CLOSE_PAREN Proc2 ELSE Proc1
PIf ::= IF OPEN_PAREN Proc CLOSE_PAREN Proc2
PNew ::= NEW NameDecl? IN Proc1


ProcBlock       ::=  OPEN_BRACE Proc CLOSE_BRACE
ProcBlockOption ::=  OPEN_BRACE [Proc] CLOSE_BRACE
ProcParenOption ::= "(" [Proc] ")"

// Process variables
ProcVar ::= "_" | Var

Var ::= ID_NAME

// This is needed for differ from Name and ProcessVar
NameVar ::= Var {
   implements = [ "coop.rchain.lang.psi.RhoNamedElement" ]
   mixin = "coop.rchain.lang.psi.RhoNamedElementImpl"
}

// Names
Name_ ::= "_" | NameVar | AT Proc12 {
   implements = [ "coop.rchain.lang.psi.RhoNamedElement" ]
   mixin = "coop.rchain.lang.psi.RhoNamedElementImpl"
}
RhoName ::= Name_ (COMMA Name_)*

// Bundle
Bundle ::= "bundle+" | "bundle-" | "bundle0" | "bundle"

// Receipt
Receipt ::= ReceiptLinearImpl

ReceiptLinearImpl ::= [LinearBind]

private LinearBind_ ::= [RhoName] NameRemainder ("<-"|"<=") RhoName

LinearBind ::= LinearBind_ (";" LinearBind_)*

// Types of Send
Send ::= "!" || "!!"

// select branches
private Branch_ ::= ReceiptLinearImpl "=>" Proc3
Branch ::= Branch_+

// Match Cases
Case_ ::= Proc13 "=>" Proc3
Case ::= Case_+

// Name Declarations
// Eventually will have IOPairs.
NameDecl ::= NameDecl_ (COMMA NameDecl_)*
NameDecl_ ::= NameVar OPEN_PAREN URI CLOSE_PAREN | NameVar

// Booleans:
Bool ::= TRUE | FALSE

// Ground
Ground ::= Bool | Integer | StringLit | URI

// Collections:
private CollectList ::= OPEN_SQUARE_BRACKET [Proc] ProcRemainder CLOSE_SQUARE_BRACKET
private CollectSet ::= "Set" "(" [Proc] ")"

// we use Proc_ here instead of Proc to avoid confusion of Grammar kit
private CollectTuple ::= OPEN_PAREN Proc_ (COMMA Proc_)+ CLOSE_PAREN | OPEN_PAREN Proc ",)"
CollectMap ::= "{" [KeyValuePair] "}"

// important: we use Proc_ here, because if we use Proc, they will all consume COMMA
private KeyValuePair_ ::= Proc COLON Proc_
KeyValuePair ::= KeyValuePair_ (COMMA KeyValuePair_)*



Collection ::= CollectList | CollectTuple | CollectMap | CollectSet


// Remainders:
ProcRemainder ::= (TRIPLE_DOT Var)?

NameRemainder ::= (TRIPLE_DOT AT Var)?


VarRefKind ::= "=" | "=" "*"

SimpleType ::= "Bool" | "Int" | "String" | "Url" | "ByteArray"
